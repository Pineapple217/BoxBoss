// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package database

import (
	"context"
)

const deleteRepo = `-- name: DeleteRepo :exec


DELETE FROM repositories
WHERE id = ?
`

// -- name: CreateAuthor :one
// INSERT INTO authors (
//
//	name, bio
//
// ) VALUES (
//
//	?, ?
//
// )
// RETURNING *;
// -- name: UpdateAuthor :exec
// UPDATE authors
// set name = ?,
// bio = ?
// WHERE id = ?;
func (q *Queries) DeleteRepo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteRepo, id)
	return err
}

const getRepo = `-- name: GetRepo :one
SELECT id, name, url, container_repo, container_tag, container_id, compose_file, compose_service FROM repositories
WHERE id = ? LIMIT 1
`

func (q *Queries) GetRepo(ctx context.Context, id int64) (Repository, error) {
	row := q.db.QueryRowContext(ctx, getRepo, id)
	var i Repository
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.ContainerRepo,
		&i.ContainerTag,
		&i.ContainerID,
		&i.ComposeFile,
		&i.ComposeService,
	)
	return i, err
}

const listRepos = `-- name: ListRepos :many
SELECT id, name, url, container_repo, container_tag, container_id, compose_file, compose_service FROM repositories
ORDER BY name
`

func (q *Queries) ListRepos(ctx context.Context) ([]Repository, error) {
	rows, err := q.db.QueryContext(ctx, listRepos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Repository
	for rows.Next() {
		var i Repository
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.ContainerRepo,
			&i.ContainerTag,
			&i.ContainerID,
			&i.ComposeFile,
			&i.ComposeService,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
