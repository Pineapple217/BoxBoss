package view

import (
	"strconv"
	"github.com/Pineapple217/BoxBoss/pkg/database"
	"strings"
)

templ Repos(repos []database.Repository) {
	@Base() {
		<h1>Repo's</h1>
		<details>
			<summary role="button" class="outline contrast">Terminal</summary>
			<div id="terminal"></div>
			<script src="/static/js/termfeed.js"></script>
			<hr/>
			<script>
				me().run(e => {let m = me(); window.openTerm = () => {m.open = true} })	
			</script>
		</details>
		<button data-target="modal-create" onclick="toggleModal(event)">
			Launch demo modal
		</button>
		for _, repo := range repos {
			@repoI(repo)
		}
		<dialog id="modal-create">
			@repoForm()
		</dialog>
	}
}

templ repoForm() {
	<article>
		<header>
			<button
				aria-label="Close"
				rel="prev"
				data-target="modal-create"
				onclick="toggleModal(event)"
			></button>
			<h3>Confirm your action!</h3>
		</header>
		<p>
			Cras sit amet maximus risus. Pellentesque sodales odio sit amet augue finibus
			pellentesque. Nullam finibus risus non semper euismod.
		</p>
		<footer>
			<button
				role="button"
				class="secondary"
				data-target="modal-create"
				onclick="toggleModal(event)"
			>Cancel</button>
			<button autofocus data-target="modal-example" onclick="toggleModal(event)">
				Confirm
			</button>
		</footer>
	</article>
}

templ repoI(repo database.Repository) {
	<article>
		<header>
			<h1>{ repo.Name }</h1>
		</header>
		{ hideToken(repo.Url) }
		<br/>
		{ repo.ContainerRepo.String }
		<br/>
		{ repo.ContainerTag.String }
		<br/>
		<footer>
			<p class="grid">
				<button
					hx-post={ "/repo/" + strconv.FormatInt(repo.ID, 10) + "/build" }
					hx-on:click="window.openTerm()"
					hx-swap="none"
				>
					Build
				</button>
				<button hx-post={ "/repo/" + strconv.FormatInt(repo.ID, 10) + "/update" }>
					Update
				</button>
			</p>
		</footer>
	</article>
}

func hideToken(url string) string {
	parts := strings.SplitN(url, "://", 2)
	if len(parts) != 2 {
		return url // Not a valid URL format
	}

	tokenParts := strings.SplitN(parts[1], "@", 2)
	if len(tokenParts) != 2 {
		return url // No token found
	}
	hostAndPath := tokenParts[1]
	newURL := parts[0] + "://" + "*****" + "@" + hostAndPath

	return newURL
}
